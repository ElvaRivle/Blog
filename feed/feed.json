{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Elvir&#39;s Blog",
  "language": "en",
  "home_page_url": "https://elvarivle.github.com/Blog",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "Passionate software developer, constantly learning and spreading the gained knowledge",
  "author": {
    "name": "Elvir Vlahovljak",
    "url": "https://elvarivle.github.com/Blog/about-me/"
  },
  "items": [{
      "id": "https://elvarivle.github.com/Blog/posts/Local%20containerized%20mail%20server%20and%20client/",
      "url": "https://elvarivle.github.com/Blog/posts/Local%20containerized%20mail%20server%20and%20client/",
      "title": "Local containerized mail server and client",
      "content_html": "<p>Does your app require sending and reading mails from the mail server and you don't want to rely on Gmail, Outlook or similar service? This blog post will focus on setting up fully containerized local mail server for sending and reading mails, browser based mail client and seeding mail users upon mail server container startup.</p>\n<h1 id=\"docker-compose-setup\" tabindex=\"-1\">Docker compose setup <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Local%20containerized%20mail%20server%20and%20client/#docker-compose-setup\" aria-hidden=\"true\">#</a></h1>\n<p>This setup will use <code>Greenmail</code> as a mail server, <code>Roundcube</code> as a mail client and <code>Postman</code> for seeding the initial users when mail server container starts up.</p>\n<p><code>docker-compose.yaml</code></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">greenmail</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> greenmail/standalone<span class=\"token punctuation\">:</span>latest\n    <span class=\"token comment\"># we can reference this container from other containers with mailserver.com</span>\n    <span class=\"token comment\"># we will also use this as the domain for mail server</span>\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> mailserver.com\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> JAVA_OPTS=<span class=\"token punctuation\">-</span>Dgreenmail.verbose\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9025:3025\"</span> <span class=\"token comment\"># SMTP</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9110:3110\"</span> <span class=\"token comment\"># POP3</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9143:3143\"</span> <span class=\"token comment\"># IMAP</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9465:3465\"</span> <span class=\"token comment\"># SMTPS</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9993:3993\"</span> <span class=\"token comment\"># IMAPS</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9995:3995\"</span> <span class=\"token comment\"># POP3S</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9003:8080\"</span> <span class=\"token comment\"># API</span>\n\n  <span class=\"token key atrule\">postman</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postman/newman<span class=\"token punctuation\">:</span>alpine\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># next step in the blog post will be generating this postman collection json file</span>\n      run GreenMail_Users.postman_collection.json <span class=\"token punctuation\">-</span>k\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># postman collection must be located in conf/postman folder, relative to the location of this docker compose file</span>\n      <span class=\"token punctuation\">-</span> ./conf/postman<span class=\"token punctuation\">:</span>/etc/newman\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> on<span class=\"token punctuation\">-</span>failure<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> greenmail\n\n\n  <span class=\"token key atrule\">roundcubemail</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> roundcube/roundcubemail<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./data/roundcube/www<span class=\"token punctuation\">:</span>/var/www/html\n      <span class=\"token punctuation\">-</span> ./data/roundcube/db/sqlite<span class=\"token punctuation\">:</span>/var/roundcube/db\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9002:80\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ROUNDCUBEMAIL_DB_TYPE=sqlite\n      <span class=\"token punctuation\">-</span> ROUNDCUBEMAIL_SKIN=elastic\n      <span class=\"token punctuation\">-</span> ROUNDCUBEMAIL_DEFAULT_HOST=mailserver.com\n      <span class=\"token punctuation\">-</span> ROUNDCUBEMAIL_SMTP_SERVER=mailserver.com\n      <span class=\"token punctuation\">-</span> ROUNDCUBEMAIL_DEFAULT_PORT=3143 <span class=\"token comment\"># containers in the same network don't see exposed ports, only the internal ports</span>\n      <span class=\"token punctuation\">-</span> ROUNDCUBEMAIL_SMTP_PORT=3025</code></pre>\n<p>Based on this docker compose file, the following will happen:</p>\n<ul>\n<li>greenmail will be started with web UI accessible from the host machine on <a href=\"http://localhost:9003/\">http://localhost:9003</a></li>\n<li>postman collection will run POST requests for each user to <a href=\"http://mailserver.com:8080/api/user\">http://mailserver.com:8080/api/user</a></li>\n<li>roundcube will be started with web UI accessible from the host machine on <a href=\"http://localhost:9002/\">http://localhost:9002</a></li>\n<li>roundcube will use <a href=\"http://mailserver.com/\">mailserver.com</a> container as a mail server</li>\n</ul>\n<h1 id=\"postman-collection\" tabindex=\"-1\">Postman collection <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Local%20containerized%20mail%20server%20and%20client/#postman-collection\" aria-hidden=\"true\">#</a></h1>\n<p>Create a postman collection consisting of POST requests for each user with the following configuration:</p>\n<p><code>POST http://mailserver.com:8080/api/user</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"username@mailserver.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"login\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"roundcube-login-username\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"roundcube-login-password\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Export the collection to json file and place it in <code>conf/postman</code> folder, relative to docker compose file.</p>\n<h3 id=\"note\" tabindex=\"-1\">NOTE: <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Local%20containerized%20mail%20server%20and%20client/#note\" aria-hidden=\"true\">#</a></h3>\n<p>Instead of Postman, you could also write some basic <code>bash</code> script with <code>curl</code> commands that do the same thing, containerize that script and use it instead of postman container.</p>\n<h1 id=\"final-remark\" tabindex=\"-1\">Final remark <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Local%20containerized%20mail%20server%20and%20client/#final-remark\" aria-hidden=\"true\">#</a></h1>\n<p>Execute <code>docker compose up -d</code>, navigate to <a href=\"http://localhost:9002/\">http://localhost:9002</a> and login with one of the users you've created. Send a mail to the other user, then login with that user. This is the screen you should be greeted with (redacted due to using sensitive usernames):</p>\n<img src=\"https://elvarivle.github.com/Blog/img/containerized-mail-server-post/test-mail-send.png\" alt=\"Mail send test\" width=\"1000\" height=\"420\" />",
      "date_published": "04 Aug 2024"
    },{
      "id": "https://elvarivle.github.com/Blog/posts/Feign%20-%20Handle%20errors%20from%20response%20body/",
      "url": "https://elvarivle.github.com/Blog/posts/Feign%20-%20Handle%20errors%20from%20response%20body/",
      "title": "Feign - Handle errors from response body",
      "content_html": "<h1 id=\"devil-is-in-the-details\" tabindex=\"-1\">Devil is in the details <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Feign%20-%20Handle%20errors%20from%20response%20body/#devil-is-in-the-details\" aria-hidden=\"true\">#</a></h1>\n<p>It's time for you to grab the next ticket in the sprint. The ticket says:</p>\n<blockquote>\n<p>Configure error handling for XZY third-party API in our codebase</p>\n</blockquote>\n<p><em>&quot;I know how to write an error decoder, this will be easy&quot;</em>, you may say. You go to the XYZ documentation website and see that you need to handle about 10 possible errors. Along with that, you're greeted with a surprise: <strong>In the case of error, all methods return the error details in the body, but some methods return 200, and some non-200 status codes</strong>. Issue here is that error decoder, which handles non-200 status codes, and regular decoder, which handles 200 status codes, perform error handling quite differently. This blog post should provide a solution on how to avoid code duplication (keep error handling logic in one place), and also catch only one exception, <code>FeignException</code>, in the service layer (and not 10 that are listed on the documentation website), all while still using both decoders.</p>\n<h1 id=\"how-decoding-error-handling-works-under-the-hood\" tabindex=\"-1\">How decoding error handling works under the hood <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Feign%20-%20Handle%20errors%20from%20response%20body/#how-decoding-error-handling-works-under-the-hood\" aria-hidden=\"true\">#</a></h1>\n<p>Let's take a look at <a href=\"https://github.com/OpenFeign/feign/blob/master/core/src/main/java/feign/InvocationContext.java\" target=\"_blank\">InvocationContext.java</a> from Feign library, where calls to both decoders are implemented, to see how they perform error handling.</p>\n<p>Regular decoder call source code:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span> returnType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">FeignException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecodeException</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">errorReading</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Error decoder call source code:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Exception</span> <span class=\"token function\">decodeError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Response</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> errorDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">ensureClosed</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>As we can see, regular decoder error handling catches all exceptions, wraps them into <code>FeignException</code> and rethrows that, which is great, since on the service level, we can just catch this <code>FeignException</code>. But error decoder error handling is quite different, it <strong>returns raw</strong> exception, no wrapping, no re-throwing. So in the case you create custom exceptions for all 10 possible API errors, or even if you create one single exception for all cases, and throw them/it from the error decoder, then you will have to handle both those/that error together with <code>FeignException</code> in service layer, which isn't ideal.</p>\n<p>So, let's see the solution where all error handling logic is unified and service layer only deals with the <code>FeignException</code>, nothing else.</p>\n<h1 id=\"solution-theory\" tabindex=\"-1\">Solution (theory) <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Feign%20-%20Handle%20errors%20from%20response%20body/#solution-theory\" aria-hidden=\"true\">#</a></h1>\n<p><em>Just to be clear, I'm not saying this is the only or the best solution, but the one I've come to with the best intention.</em></p>\n<p>The solution consist of the following:</p>\n<ol>\n<li>Create one base exception <code>BaseXYZApiException</code> that accepts either message as <code>String</code>, or cause as <code>Throwable</code>\n<ul>\n<li>If you decide to use cause as <code>Throwable</code>, create custom exceptions for each of the 10 API error cases</li>\n</ul>\n</li>\n<li>That base exception should extend <code>FeignException</code></li>\n<li>From regular decoder throw <code>BaseXYZApiException</code>, passing it either some custom message, or one of the 10 custom exceptions as cause</li>\n<li>From error decoder, call regular decoder by wrapping it in <code>try-catch</code> block</li>\n<li>If <code>catch</code> block catches <code>BaseXYZApiException</code>, return it from error decoder. Otherwise, call <a href=\"https://github.com/OpenFeign/feign/blob/master/core/src/main/java/feign/codec/ErrorDecoder.java#L102\" target=\"_blank\">default error decoder</a> provided by Feign</li>\n<li>Only catch <code>FeignException</code> in service layer, not minding <code>BaseXYZApiException</code> or any of the 10 exceptions</li>\n<li>Configure Feign client appropriately</li>\n</ol>\n<h1 id=\"we-covered-all-possible-scenarios\" tabindex=\"-1\">We covered all possible scenarios <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Feign%20-%20Handle%20errors%20from%20response%20body/#we-covered-all-possible-scenarios\" aria-hidden=\"true\">#</a></h1>\n<p>Let's examine all possible cases which can happen and how we covered them with the provided solution:</p>\n<ol>\n<li>200 response code without error in the body → regular decoder will be called and no exception will be thrown, our service layer will receive decoded response object, the happiest path possible</li>\n</ol>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        ...\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"2\">\n<li>200 response code with error in the body → regular decoder will be called and our custom made exception will be thrown (<code>BaseXYZApiException</code> mentioned earlier), which will be handled by our service layer as <code>FeignException</code></li>\n</ol>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"_comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTTP respone code for this body is 200\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        ...\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">301</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Error message\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"3\">\n<li>non-200 response code with or without error in the body → error decoder will be called\n<ol>\n<li>First handle all response codes where error wouldn't be in the body per XYZ API docs. Example in our case can be 429, Too Many Requests, where body is completely empty</li>\n<li>If response code is one where error could be in the body per XYZ API docs, call the regular decoder to extract proper exception from it, then return that exception</li>\n<li>If regular decoder from the previous step doesn't throw <code>BaseXYZApiException</code>, then some other error has happened which we will leave to default Feign error decoder to handle</li>\n<li>Any exception returned from the error decoder will be handled by our service layer as <code>FeignException</code></li>\n</ol>\n</li>\n</ol>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"_comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTTP respone code for this body is non-200\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        ...\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"error\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">301</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Error message\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"solution-code-kotlin-example\" tabindex=\"-1\">Solution (code, Kotlin example) <a class=\"direct-link\" href=\"https://elvarivle.github.com/Blog/posts/Feign%20-%20Handle%20errors%20from%20response%20body/#solution-code-kotlin-example\" aria-hidden=\"true\">#</a></h1>\n<ol>\n<li>Create one base exception <code>BaseXYZApiException</code> that accepts either message as <code>String</code>, or cause as <code>Throwable</code>\n<ul>\n<li>If you decide to use cause as <code>Throwable</code>, create custom exceptions for each of the 10 API error cases</li>\n</ul>\n</li>\n<li>That base exception should extend <code>FeignException</code></li>\n</ol>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">//example for one of the 10 possible exceptions for API error</span>\n<span class=\"token keyword\">class</span> InvalidApiKeyException <span class=\"token operator\">:</span>\n    <span class=\"token function\">RuntimeException</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string-literal singleline\"><span class=\"token string\">\"Invalid API key for XZY external API\"</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//this example will use cause as Throwable</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">BaseXYZApiException</span><span class=\"token punctuation\">(</span>\n    status<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    cause<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">FeignException</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"3\">\n<li>From regular decoder throw <code>BaseXYZApiException</code>, passing it either some custom message, or one of the 10 custom exceptions as cause</li>\n</ol>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> INVALID_API_KEY <span class=\"token operator\">=</span> <span class=\"token number\">301</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> EXPIRED_SUBSCRIPTION <span class=\"token operator\">=</span> <span class=\"token number\">302</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">ResponseDecoder</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token operator\">:</span> ObjectMapper<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">JacksonDecoder</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Any <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> decodedResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">val</span> error <span class=\"token operator\">=</span> decodedResponse<span class=\"token punctuation\">.</span>error\n\n        <span class=\"token comment\">//error object contains code attribute</span>\n        <span class=\"token comment\">//based on which we determine which exception should be thrown</span>\n        <span class=\"token keyword\">val</span> baseException <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            INVALID_API_KEY <span class=\"token operator\">-></span> <span class=\"token function\">InvalidApiKeyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            EXPIRED_SUBSCRIPTION <span class=\"token operator\">-></span> <span class=\"token function\">ExpiredSubscriptionException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseException <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token comment\">//passing baseException defined above to BaseXYZApiException</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token function\">BaseXYZApiException</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> baseException<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">//no error found in response, the happiest path</span>\n        <span class=\"token keyword\">return</span> decodedResponse\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"4\">\n<li>From error decoder, call regular decoder by wrapping it in <code>try-catch</code> block</li>\n<li>If <code>catch</code> block catches <code>BaseXYZApiException</code>, return it from error decoder. Otherwise, call <a href=\"https://github.com/OpenFeign/feign/blob/master/core/src/main/java/feign/codec/ErrorDecoder.java#L102\" target=\"_blank\">default error decoder</a> provided by Feign</li>\n</ol>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">ResponseErrorDecoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> regularDecoder<span class=\"token operator\">:</span> ResponseDecoder<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ErrorDecoder <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> statusCodesWhereBodyCouldContainError <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span>INTERNAL_SERVER_ERROR_500<span class=\"token punctuation\">,</span> FORBIDDEN_403<span class=\"token punctuation\">,</span> BAD_REQUEST_400<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//create default error decoder provided by Feign</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> defaultErrorDecoder <span class=\"token operator\">=</span> ErrorDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>methodKey<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> response<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> status <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">//first handle all response codes where body wouldn't contain an error</span>\n            TOO_MANY_REQUESTS_429 <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">RetryableException</span><span class=\"token punctuation\">(</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">reason</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">httpMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> Long<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//if regular decoder doesn't return BaseXYZApiException</span>\n                <span class=\"token comment\">//fallback to default error decoder</span>\n                <span class=\"token function\">getExceptionFromBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?:</span> defaultErrorDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getExceptionFromBody</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Exception<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//response code for which parsing the body isn't necessary</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!</span><span class=\"token keyword\">in</span> statusCodesWhereBodyCouldContainError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            regularDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> ResponseType2<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">//no error in body found</span>\n            <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token operator\">:</span> BaseXYZApiException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token comment\">//body contains error and regular decoder threw BaseXYZApiException</span>\n            ex\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token comment\">//we can ignore exceptions that aren't BaseXYZApiException</span>\n\t        <span class=\"token comment\">//Feign default error decoder will handle them properly</span>\n            <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"6\">\n<li>Only catch <code>FeignException</code> in service layer, not minding <code>BaseXYZApiException</code> or any of the 10 exceptions</li>\n</ol>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> clientCallResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xyzClient<span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//the happiest path</span>\n  <span class=\"token comment\">//do something with the proper response here</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>ex<span class=\"token operator\">:</span> FeignException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//we don't lose information about what has caused FeignException since we provided the cause to the BaseXYZApiException</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"XYZ API call failed\"</span></span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token function\">SomeNiceClientFacingError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"7\">\n<li>Configure Feign client appropriately</li>\n</ol>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> XYZClient <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> regularDecoder <span class=\"token operator\">=</span> <span class=\"token function\">ResponseDecoder</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Feign\n        <span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">decoder</span><span class=\"token punctuation\">(</span>regularDecoder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">errorDecoder</span><span class=\"token punctuation\">(</span><span class=\"token function\">ResponseErrorDecoder</span><span class=\"token punctuation\">(</span>regularDecoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retryer</span><span class=\"token punctuation\">(</span><span class=\"token function\">XYZApiRetryer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">target</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "30 Jun 2024"
    }
  ]
}
